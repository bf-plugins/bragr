#! /usr/bin/env python

"""generate_wrapper.py

Uses ctypesgen to generate a python wrapper.
"""
import simplejson as json
from jinja2 import Template
import os
import subprocess
import crayons
import shutil

ctypes_tpl = 'ctypesgen src/{{bn}}.h -obuild/{{bn}}.json -lbifrost -l{{build_path}}/{{libname}}.so -I. -I{{bf_src_path}} --no-embed-preamble --output-language=json'

hdr_tpl= '''
""" {{libname}}_generated.py 

Python wrapper generated with bragr (bifrost)
"""

from ctypesgen.libraryloader import load_library, add_library_search_dirs 
from ctypesgen.printer_python.preamble import *
from bifrost.libbifrost_generated import BFarray, BFstatus

add_library_search_dirs("{{build_path}}")

_libs={}
_libs["bf_dp4a"] = load_library("bf_dp4a")
'''

func_tpl = '''
for _lib in _libs.values():
    if not _lib.has("{{name}}", "cdecl"):
        continue
    _{{name}} = _lib.get("{{name}}", "cdecl")
    _{{name}}.argtypes = [{% for arg in args -%} 
    {%- if arg['Klass'] == 'CtypesPointer' -%} 
    POINTER({{arg['destination']['name']}}),
    {%- else -%}
    c_{{arg['name']}},
    {%- endif -%}
    {%- endfor -%}]
    _{{name}}.restype = {{return['name']}}

    def {{name}}({% for arg in args %}{{arg['identifier']}}, {% endfor %}):
        """
        Python wrapper for _{{name}} -- generated by bragr (bifrost)
        Args:
            {% for arg in args %}{%- if arg['Klass'] == 'CtypesPointer' -%} 
            {{arg['identifier']}}: POINTER({{arg['destination']['name']}})
            {% else -%}
            {{arg['identifier']}}: {{arg['name']}},
            {% endif -%}
    {% endfor %}
        """
        _{{name}}({% for arg in args %}{{arg['identifier']}}, {% endfor %})
    break 

'''

j2_ctypes_tpl = Template(ctypes_tpl)
j2_hdr_tpl  = Template(hdr_tpl)
j2_func_tpl = Template(func_tpl)

if __name__== "__main__":

    
    header_files = ['xcorr_lite.h', 'beanfarmer.h']
    
    hdr={
        'libname': 'libbf_dp4a',
        'plugname': 'bf_dp4a',
        'bf_src_path': '/home/dancpr/software/bifrost/src',
        'bf_lib_path': '/home/dancpr/software/bifrost/lib',
        'build_path': '/home/dancpr/software/bf_plugins/bf_dp4a/build'
        }
    
    fn_out = 'build/'+hdr['libname'] + '_wrapper.py'
    
    with open(fn_out, 'w') as fh :
        fh.write(j2_hdr_tpl.render(hdr))

    # Read .h headersand generate ctypesgen JSON
    for header_file in header_files:
        hdr['bn']= os.path.splitext(os.path.basename(header_file))[0]
        ctypes_cmd = j2_ctypes_tpl.render(hdr)

        # Run ctypesgen
        print(crayons.green(ctypes_cmd))
        output = subprocess.run(ctypes_cmd.split(' '),  check=True, capture_output=True)
        outmsg = output.stderr.decode('ascii')

        if "ERROR" in outmsg:
            print(outmsg)
            print(crayons.red("ctypesgen error detected, exiting...", bold=True))
            exit()
    
        # load JSON from ctypesgen
        fn_in = os.path.join('build', hdr['bn'] + '.json')
        with open(fn_in) as fh:
            d = json.load(fh)  

        # Generate 
        for item in d:
            if item['type'] == 'function':
                name = item['name']
                print(crayons.white(f"Wrapping {name}...", bold=True))
                func = item
                with open(fn_out, 'a') as fh:
                    fh.write(j2_func_tpl.render(func))

    # Copy to python package
    #shutil.copy('build/ctypes_loader.py', hdr['plugname'])
    #shutil.copy('build/ctypes_preamble.py', hdr['plugname'])
    #hutil.copy(fn_out, hdr['build_path'])
    print(crayons.white(f"Wrapper written to {fn_out}", bold=True))
